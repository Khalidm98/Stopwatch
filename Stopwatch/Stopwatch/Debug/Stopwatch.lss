
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000209c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000209c  00002130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800070  00800070  00002140  2**0
                  ALLOC
  3 .stab         000017d0  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdf  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000048ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000076d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000085e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000886d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000903b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_2>
       c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_3>
      10:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_6>
      1c:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_7>
      20:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__vector_8>
      24:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_18>
      4c:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 07 	call	0xe28	; 0xe28 <main>
      8a:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 25 10 	jmp	0x204a	; 0x204a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
static volatile void (*g_int1_callback)(void) = NULL_PTR;
static volatile void (*g_int2_callback)(void) = NULL_PTR;


/* Interrupt Sevice Routines of all external interrupt modules */
ISR(INT0_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_int0_callback != NULL_PTR)
     b70:	80 91 70 00 	lds	r24, 0x0070
     b74:	90 91 71 00 	lds	r25, 0x0071
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_1+0x40>
		(*g_int0_callback)();
     b7c:	e0 91 70 00 	lds	r30, 0x0070
     b80:	f0 91 71 00 	lds	r31, 0x0071
     b84:	09 95       	icall
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_2>:

ISR(INT1_vect) {
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if (g_int1_callback != NULL_PTR)
     bd6:	80 91 72 00 	lds	r24, 0x0072
     bda:	90 91 73 00 	lds	r25, 0x0073
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_2+0x40>
		(*g_int1_callback)();
     be2:	e0 91 72 00 	lds	r30, 0x0072
     be6:	f0 91 73 00 	lds	r31, 0x0073
     bea:	09 95       	icall
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_18>:

ISR(INT2_vect) {
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	if (g_int2_callback != NULL_PTR)
     c3c:	80 91 74 00 	lds	r24, 0x0074
     c40:	90 91 75 00 	lds	r25, 0x0075
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_18+0x40>
		(*g_int2_callback)();
     c48:	e0 91 74 00 	lds	r30, 0x0074
     c4c:	f0 91 75 00 	lds	r31, 0x0075
     c50:	09 95       	icall
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <INT_init>:


void INT_init(const INT_ConfigType * const config_ptr) {
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <INT_init+0x6>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <INT_init+0x8>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
	if (config_ptr->num == INT_2) {
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	80 81       	ld	r24, Z
     c8e:	82 30       	cpi	r24, 0x02	; 2
     c90:	49 f5       	brne	.+82     	; 0xce4 <INT_init+0x6c>
		/* set INT2 (PB2) pin as input */
		CLEAR_BIT(DDRB,PB2);
     c92:	a7 e3       	ldi	r26, 0x37	; 55
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e7 e3       	ldi	r30, 0x37	; 55
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8b 7f       	andi	r24, 0xFB	; 251
     c9e:	8c 93       	st	X, r24
		
		/* set INT2 trigger event */
		(config_ptr->trigger & 1) ? SET_BIT(MCUCSR,ISC2) : CLEAR_BIT(MCUCSR,ISC2);
     ca0:	e9 81       	ldd	r30, Y+1	; 0x01
     ca2:	fa 81       	ldd	r31, Y+2	; 0x02
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	81 70       	andi	r24, 0x01	; 1
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	88 23       	and	r24, r24
     cb0:	49 f0       	breq	.+18     	; 0xcc4 <INT_init+0x4c>
     cb2:	a4 e5       	ldi	r26, 0x54	; 84
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e4 e5       	ldi	r30, 0x54	; 84
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 64       	ori	r24, 0x40	; 64
     cbe:	8c 93       	st	X, r24
     cc0:	8c 91       	ld	r24, X
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <INT_init+0x5c>
     cc4:	a4 e5       	ldi	r26, 0x54	; 84
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e4 e5       	ldi	r30, 0x54	; 84
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7b       	andi	r24, 0xBF	; 191
     cd0:	8c 93       	st	X, r24
     cd2:	8c 91       	ld	r24, X
		
		/* enable INT2 */
		SET_BIT(GICR,INT2);
     cd4:	ab e5       	ldi	r26, 0x5B	; 91
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	eb e5       	ldi	r30, 0x5B	; 91
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 62       	ori	r24, 0x20	; 32
     ce0:	8c 93       	st	X, r24
     ce2:	45 c0       	rjmp	.+138    	; 0xd6e <INT_init+0xf6>
	}

	else if (config_ptr->num == INT_0) {
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	d9 f4       	brne	.+54     	; 0xd24 <INT_init+0xac>
		/* set INT0 (PD2) pin as input */
		CLEAR_BIT(DDRD,PD2);
     cee:	a1 e3       	ldi	r26, 0x31	; 49
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e3       	ldi	r30, 0x31	; 49
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8b 7f       	andi	r24, 0xFB	; 251
     cfa:	8c 93       	st	X, r24

		/* set INT0 trigger event */
		MCUCR = (MCUCR & 0xFC) | (config_ptr->trigger);
     cfc:	a5 e5       	ldi	r26, 0x55	; 85
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e5       	ldi	r30, 0x55	; 85
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	98 2f       	mov	r25, r24
     d08:	9c 7f       	andi	r25, 0xFC	; 252
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	81 81       	ldd	r24, Z+1	; 0x01
     d10:	89 2b       	or	r24, r25
     d12:	8c 93       	st	X, r24

		/* enable INT0 */
		SET_BIT(GICR,INT0);
     d14:	ab e5       	ldi	r26, 0x5B	; 91
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e5       	ldi	r30, 0x5B	; 91
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	8c 93       	st	X, r24
     d22:	25 c0       	rjmp	.+74     	; 0xd6e <INT_init+0xf6>
	}

	else if (config_ptr->num == INT_1) {
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	80 81       	ld	r24, Z
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	01 f5       	brne	.+64     	; 0xd6e <INT_init+0xf6>
		/* set INT1 (PD3) pin as input */
		CLEAR_BIT(DDRD,PD3);
     d2e:	a1 e3       	ldi	r26, 0x31	; 49
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e1 e3       	ldi	r30, 0x31	; 49
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	8c 93       	st	X, r24
		
		/* set INT1 trigger event */
		MCUCR = (MCUCR & 0xF3) | (config_ptr->trigger << 2);
     d3c:	a5 e5       	ldi	r26, 0x55	; 85
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e5       	ldi	r30, 0x55	; 85
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	28 2f       	mov	r18, r24
     d48:	23 7f       	andi	r18, 0xF3	; 243
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	82 2b       	or	r24, r18
     d5e:	8c 93       	st	X, r24

		/* enable INT1 */
		SET_BIT(GICR,INT1);
     d60:	ab e5       	ldi	r26, 0x5B	; 91
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	eb e5       	ldi	r30, 0x5B	; 91
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	8c 93       	st	X, r24
	}
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <INT_setCallBack>:

void INT_setCallBack(INT_Num num, void (*f_ptr)(void)) {
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <INT_setCallBack+0x6>
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	7b 83       	std	Y+3, r23	; 0x03
     d8c:	6a 83       	std	Y+2, r22	; 0x02
	if (num == INT_2)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	39 f4       	brne	.+14     	; 0xda2 <INT_setCallBack+0x26>
		g_int2_callback = f_ptr;
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	90 93 75 00 	sts	0x0075, r25
     d9c:	80 93 74 00 	sts	0x0074, r24
     da0:	13 c0       	rjmp	.+38     	; 0xdc8 <INT_setCallBack+0x4c>
	else if (num == INT_0)
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 23       	and	r24, r24
     da6:	39 f4       	brne	.+14     	; 0xdb6 <INT_setCallBack+0x3a>
		g_int0_callback = f_ptr;
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	90 93 71 00 	sts	0x0071, r25
     db0:	80 93 70 00 	sts	0x0070, r24
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <INT_setCallBack+0x4c>
	else if (num == INT_1)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	31 f4       	brne	.+12     	; 0xdc8 <INT_setCallBack+0x4c>
		g_int1_callback = f_ptr;
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	9b 81       	ldd	r25, Y+3	; 0x03
     dc0:	90 93 73 00 	sts	0x0073, r25
     dc4:	80 93 72 00 	sts	0x0072, r24
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <INT_deInit>:

void INT_deInit(INT_Num num) {
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
	if (num == INT_2)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	41 f4       	brne	.+16     	; 0xdf6 <INT_deInit+0x22>
		CLEAR_BIT(GICR,INT2);
     de6:	ab e5       	ldi	r26, 0x5B	; 91
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	eb e5       	ldi	r30, 0x5B	; 91
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8f 7d       	andi	r24, 0xDF	; 223
     df2:	8c 93       	st	X, r24
     df4:	15 c0       	rjmp	.+42     	; 0xe20 <INT_deInit+0x4c>
	else if (num == INT_0)
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 23       	and	r24, r24
     dfa:	41 f4       	brne	.+16     	; 0xe0c <INT_deInit+0x38>
		CLEAR_BIT(GICR,INT0);
     dfc:	ab e5       	ldi	r26, 0x5B	; 91
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	eb e5       	ldi	r30, 0x5B	; 91
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7b       	andi	r24, 0xBF	; 191
     e08:	8c 93       	st	X, r24
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <INT_deInit+0x4c>
	else if (num == INT_1)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	39 f4       	brne	.+14     	; 0xe20 <INT_deInit+0x4c>
		CLEAR_BIT(GICR,INT1);
     e12:	ab e5       	ldi	r26, 0x5B	; 91
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	eb e5       	ldi	r30, 0x5B	; 91
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 77       	andi	r24, 0x7F	; 127
     e1e:	8c 93       	st	X, r24
}
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <main>:
void reset(void);
void pause(void);
void resume(void);


int main(){
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	c7 56       	subi	r28, 0x67	; 103
     e36:	d0 40       	sbci	r29, 0x00	; 0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	TIMERS_ConfigType timers_config = {TIMER1A, CTC_OCR1A, F_CPU_64, DISCONNECT_OC, 0, 15625};
     e42:	ce 01       	movw	r24, r28
     e44:	8b 5a       	subi	r24, 0xAB	; 171
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	a5 96       	adiw	r28, 0x25	; 37
     e4a:	9f af       	std	Y+63, r25	; 0x3f
     e4c:	8e af       	std	Y+62, r24	; 0x3e
     e4e:	a5 97       	sbiw	r28, 0x25	; 37
     e50:	88 e6       	ldi	r24, 0x68	; 104
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a7 96       	adiw	r28, 0x27	; 39
     e56:	9f af       	std	Y+63, r25	; 0x3f
     e58:	8e af       	std	Y+62, r24	; 0x3e
     e5a:	a7 97       	sbiw	r28, 0x27	; 39
     e5c:	98 e0       	ldi	r25, 0x08	; 8
     e5e:	a8 96       	adiw	r28, 0x28	; 40
     e60:	9f af       	std	Y+63, r25	; 0x3f
     e62:	a8 97       	sbiw	r28, 0x28	; 40
     e64:	a7 96       	adiw	r28, 0x27	; 39
     e66:	ee ad       	ldd	r30, Y+62	; 0x3e
     e68:	ff ad       	ldd	r31, Y+63	; 0x3f
     e6a:	a7 97       	sbiw	r28, 0x27	; 39
     e6c:	00 80       	ld	r0, Z
     e6e:	a7 96       	adiw	r28, 0x27	; 39
     e70:	8e ad       	ldd	r24, Y+62	; 0x3e
     e72:	9f ad       	ldd	r25, Y+63	; 0x3f
     e74:	a7 97       	sbiw	r28, 0x27	; 39
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	a7 96       	adiw	r28, 0x27	; 39
     e7a:	9f af       	std	Y+63, r25	; 0x3f
     e7c:	8e af       	std	Y+62, r24	; 0x3e
     e7e:	a7 97       	sbiw	r28, 0x27	; 39
     e80:	a5 96       	adiw	r28, 0x25	; 37
     e82:	ee ad       	ldd	r30, Y+62	; 0x3e
     e84:	ff ad       	ldd	r31, Y+63	; 0x3f
     e86:	a5 97       	sbiw	r28, 0x25	; 37
     e88:	00 82       	st	Z, r0
     e8a:	a5 96       	adiw	r28, 0x25	; 37
     e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e90:	a5 97       	sbiw	r28, 0x25	; 37
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	a5 96       	adiw	r28, 0x25	; 37
     e96:	9f af       	std	Y+63, r25	; 0x3f
     e98:	8e af       	std	Y+62, r24	; 0x3e
     e9a:	a5 97       	sbiw	r28, 0x25	; 37
     e9c:	a8 96       	adiw	r28, 0x28	; 40
     e9e:	9f ad       	ldd	r25, Y+63	; 0x3f
     ea0:	a8 97       	sbiw	r28, 0x28	; 40
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	a8 96       	adiw	r28, 0x28	; 40
     ea6:	9f af       	std	Y+63, r25	; 0x3f
     ea8:	a8 97       	sbiw	r28, 0x28	; 40
     eaa:	a8 96       	adiw	r28, 0x28	; 40
     eac:	ef ad       	ldd	r30, Y+63	; 0x3f
     eae:	a8 97       	sbiw	r28, 0x28	; 40
     eb0:	ee 23       	and	r30, r30
     eb2:	c1 f6       	brne	.-80     	; 0xe64 <main+0x3c>
	INT_ConfigType int0_config = {INT_0, FALLING_INT};
     eb4:	fe 01       	movw	r30, r28
     eb6:	e3 5a       	subi	r30, 0xA3	; 163
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	10 82       	st	Z, r1
     ebc:	fe 01       	movw	r30, r28
     ebe:	e3 5a       	subi	r30, 0xA3	; 163
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	81 83       	std	Z+1, r24	; 0x01
	INT_ConfigType int1_config = {INT_1, RISING_INT};
     ec6:	fe 01       	movw	r30, r28
     ec8:	e1 5a       	subi	r30, 0xA1	; 161
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 83       	st	Z, r24
     ed0:	fe 01       	movw	r30, r28
     ed2:	e1 5a       	subi	r30, 0xA1	; 161
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	81 83       	std	Z+1, r24	; 0x01
	INT_ConfigType int2_config = {INT_2, FALLING_INT};
     eda:	fe 01       	movw	r30, r28
     edc:	ef 59       	subi	r30, 0x9F	; 159
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	80 83       	st	Z, r24
     ee4:	fe 01       	movw	r30, r28
     ee6:	ef 59       	subi	r30, 0x9F	; 159
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	81 83       	std	Z+1, r24	; 0x01

	DDRA |= 0x0F;					/* set the decoder pins as output */
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 60       	ori	r24, 0x0F	; 15
     efa:	8c 93       	st	X, r24
	DDRC |= 0x3F;					/* set the motor pins as output */
     efc:	a4 e3       	ldi	r26, 0x34	; 52
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e3       	ldi	r30, 0x34	; 52
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 63       	ori	r24, 0x3F	; 63
     f08:	8c 93       	st	X, r24
	PORTA &= 0xF0;					/* initialize the decoder pins with 0 */
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 7f       	andi	r24, 0xF0	; 240
     f16:	8c 93       	st	X, r24
	PORTC &= 0xC0;					/* disable all 7-segments */
     f18:	a5 e3       	ldi	r26, 0x35	; 53
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e3       	ldi	r30, 0x35	; 53
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 7c       	andi	r24, 0xC0	; 192
     f24:	8c 93       	st	X, r24

	SREG |= (1 << 7);				/* enable all interrupts */
     f26:	af e5       	ldi	r26, 0x5F	; 95
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ef e5       	ldi	r30, 0x5F	; 95
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	8c 93       	st	X, r24
	INT_init(&int0_config);			/* initialize interrupt 0 */
     f34:	ce 01       	movw	r24, r28
     f36:	83 5a       	subi	r24, 0xA3	; 163
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	0e 94 3c 06 	call	0xc78	; 0xc78 <INT_init>
	SET_BIT(PORTD,PD2);				/* enable internal pull up at INT0 */
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	8c 93       	st	X, r24
	INT_setCallBack(INT_0, reset);	/* set callback function of int 0 */
     f4c:	2e e8       	ldi	r18, 0x8E	; 142
     f4e:	3b e0       	ldi	r19, 0x0B	; 11
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	b9 01       	movw	r22, r18
     f54:	0e 94 be 06 	call	0xd7c	; 0xd7c <INT_setCallBack>
	INT_init(&int1_config);			/* initialize interrupt 1 */
     f58:	ce 01       	movw	r24, r28
     f5a:	81 5a       	subi	r24, 0xA1	; 161
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	0e 94 3c 06 	call	0xc78	; 0xc78 <INT_init>
	INT_setCallBack(INT_1, pause);	/* set callback function of int 1 */
     f62:	26 ea       	ldi	r18, 0xA6	; 166
     f64:	3b e0       	ldi	r19, 0x0B	; 11
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	b9 01       	movw	r22, r18
     f6a:	0e 94 be 06 	call	0xd7c	; 0xd7c <INT_setCallBack>
	INT_init(&int2_config);			/* initialize interrupt 2 */
     f6e:	ce 01       	movw	r24, r28
     f70:	8f 59       	subi	r24, 0x9F	; 159
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	0e 94 3c 06 	call	0xc78	; 0xc78 <INT_init>
	SET_BIT(PORTB,PB2);				/* enable internal pull up at INT2 */
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	8c 93       	st	X, r24
	INT_setCallBack(INT_2, resume);	/* set callback function of int 2 */
     f86:	24 eb       	ldi	r18, 0xB4	; 180
     f88:	3b e0       	ldi	r19, 0x0B	; 11
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	b9 01       	movw	r22, r18
     f8e:	0e 94 be 06 	call	0xd7c	; 0xd7c <INT_setCallBack>
	TIMERS_init(&timers_config);	/* initialize timer1 */
     f92:	ce 01       	movw	r24, r28
     f94:	8b 5a       	subi	r24, 0xAB	; 171
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <TIMERS_init>
	TIMERS_setCallBack(TIMER1A, CTC_OCR1A, update_time);
     f9c:	23 e6       	ldi	r18, 0x63	; 99
     f9e:	3b e0       	ldi	r19, 0x0B	; 11
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	64 e0       	ldi	r22, 0x04	; 4
     fa4:	a9 01       	movw	r20, r18
     fa6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TIMERS_setCallBack>

	while(1) {
		PORTC = (PORTC & 0xC0) | (1 << 0);
     faa:	a5 e3       	ldi	r26, 0x35	; 53
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e3       	ldi	r30, 0x35	; 53
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 7c       	andi	r24, 0xC0	; 192
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (s % 10);
     fba:	ab e3       	ldi	r26, 0x3B	; 59
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e3       	ldi	r30, 0x3B	; 59
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	20 7f       	andi	r18, 0xF0	; 240
     fc8:	80 91 76 00 	lds	r24, 0x0076
     fcc:	9a e0       	ldi	r25, 0x0A	; 10
     fce:	69 2f       	mov	r22, r25
     fd0:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
     fd4:	89 2f       	mov	r24, r25
     fd6:	82 2b       	or	r24, r18
     fd8:	8c 93       	st	X, r24
     fda:	fe 01       	movw	r30, r28
     fdc:	ef 5a       	subi	r30, 0xAF	; 175
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e4       	ldi	r27, 0x40	; 64
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	8e 01       	movw	r16, r28
     ff2:	03 5b       	subi	r16, 0xB3	; 179
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ef 5a       	subi	r30, 0xAF	; 175
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a e7       	ldi	r20, 0x7A	; 122
    100a:	53 e4       	ldi	r21, 0x43	; 67
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101e:	fe 01       	movw	r30, r28
    1020:	e3 5b       	subi	r30, 0xB3	; 179
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	44 f4       	brge	.+16     	; 0x104c <main+0x224>
		__ticks = 1;
    103c:	fe 01       	movw	r30, r28
    103e:	e5 5b       	subi	r30, 0xB5	; 181
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	64 c0       	rjmp	.+200    	; 0x1114 <main+0x2ec>
	else if (__tmp > 65535)
    104c:	fe 01       	movw	r30, r28
    104e:	e3 5b       	subi	r30, 0xB3	; 179
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	0c f0       	brlt	.+2      	; 0x106c <main+0x244>
    106a:	43 c0       	rjmp	.+134    	; 0x10f2 <main+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	fe 01       	movw	r30, r28
    106e:	ef 5a       	subi	r30, 0xAF	; 175
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8e 01       	movw	r16, r28
    108c:	05 5b       	subi	r16, 0xB5	; 181
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	1f c0       	rjmp	.+62     	; 0x10e2 <main+0x2ba>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e7 5b       	subi	r30, 0xB7	; 183
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	89 e1       	ldi	r24, 0x19	; 25
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10b2:	fe 01       	movw	r30, r28
    10b4:	e7 5b       	subi	r30, 0xB7	; 183
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <main+0x294>
    10c0:	fe 01       	movw	r30, r28
    10c2:	e7 5b       	subi	r30, 0xB7	; 183
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	de 01       	movw	r26, r28
    10cc:	a5 5b       	subi	r26, 0xB5	; 181
    10ce:	bf 4f       	sbci	r27, 0xFF	; 255
    10d0:	fe 01       	movw	r30, r28
    10d2:	e5 5b       	subi	r30, 0xB5	; 181
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	fe 01       	movw	r30, r28
    10e4:	e5 5b       	subi	r30, 0xB5	; 181
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	d1 f6       	brne	.-76     	; 0x10a4 <main+0x27c>
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	8e 01       	movw	r16, r28
    10f4:	05 5b       	subi	r16, 0xB5	; 181
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e3 5b       	subi	r30, 0xB3	; 179
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	de 01       	movw	r26, r28
    1116:	a9 5b       	subi	r26, 0xB9	; 185
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	fe 01       	movw	r30, r28
    111c:	e5 5b       	subi	r30, 0xB5	; 181
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8d 93       	st	X+, r24
    1126:	9c 93       	st	X, r25
    1128:	fe 01       	movw	r30, r28
    112a:	e9 5b       	subi	r30, 0xB9	; 185
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <main+0x30a>
    1136:	fe 01       	movw	r30, r28
    1138:	e9 5b       	subi	r30, 0xB9	; 185
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
		_delay_ms(2);
		PORTC = (PORTC & 0xC0) | (1 << 1);
    1140:	a5 e3       	ldi	r26, 0x35	; 53
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e3       	ldi	r30, 0x35	; 53
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	80 7c       	andi	r24, 0xC0	; 192
    114c:	82 60       	ori	r24, 0x02	; 2
    114e:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (s / 10);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	28 2f       	mov	r18, r24
    115c:	20 7f       	andi	r18, 0xF0	; 240
    115e:	80 91 76 00 	lds	r24, 0x0076
    1162:	9a e0       	ldi	r25, 0x0A	; 10
    1164:	69 2f       	mov	r22, r25
    1166:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
    116a:	82 2b       	or	r24, r18
    116c:	8c 93       	st	X, r24
    116e:	fe 01       	movw	r30, r28
    1170:	ed 5b       	subi	r30, 0xBD	; 189
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e4       	ldi	r27, 0x40	; 64
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	a2 83       	std	Z+2, r26	; 0x02
    1182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1184:	8e 01       	movw	r16, r28
    1186:	01 5c       	subi	r16, 0xC1	; 193
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	fe 01       	movw	r30, r28
    118c:	ed 5b       	subi	r30, 0xBD	; 189
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a e7       	ldi	r20, 0x7A	; 122
    119e:	53 e4       	ldi	r21, 0x43	; 67
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	f8 01       	movw	r30, r16
    11aa:	80 83       	st	Z, r24
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	a2 83       	std	Z+2, r26	; 0x02
    11b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b2:	fe 01       	movw	r30, r28
    11b4:	ff 96       	adiw	r30, 0x3f	; 63
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <main+0x3b0>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e af       	std	Y+62, r25	; 0x3e
    11d4:	8d af       	std	Y+61, r24	; 0x3d
    11d6:	46 c0       	rjmp	.+140    	; 0x1264 <main+0x43c>
	else if (__tmp > 65535)
    11d8:	fe 01       	movw	r30, r28
    11da:	ff 96       	adiw	r30, 0x3f	; 63
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	64 f5       	brge	.+88     	; 0x124c <main+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	fe 01       	movw	r30, r28
    11f6:	ed 5b       	subi	r30, 0xBD	; 189
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e2       	ldi	r20, 0x20	; 32
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e af       	std	Y+62, r25	; 0x3e
    1220:	8d af       	std	Y+61, r24	; 0x3d
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <main+0x41a>
    1224:	89 e1       	ldi	r24, 0x19	; 25
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c af       	std	Y+60, r25	; 0x3c
    122a:	8b af       	std	Y+59, r24	; 0x3b
    122c:	8b ad       	ldd	r24, Y+59	; 0x3b
    122e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <main+0x408>
    1234:	9c af       	std	Y+60, r25	; 0x3c
    1236:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	8d ad       	ldd	r24, Y+61	; 0x3d
    123a:	9e ad       	ldd	r25, Y+62	; 0x3e
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9e af       	std	Y+62, r25	; 0x3e
    1240:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	8d ad       	ldd	r24, Y+61	; 0x3d
    1244:	9e ad       	ldd	r25, Y+62	; 0x3e
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	69 f7       	brne	.-38     	; 0x1224 <main+0x3fc>
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <main+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	fe 01       	movw	r30, r28
    124e:	ff 96       	adiw	r30, 0x3f	; 63
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9e af       	std	Y+62, r25	; 0x3e
    1262:	8d af       	std	Y+61, r24	; 0x3d
    1264:	8d ad       	ldd	r24, Y+61	; 0x3d
    1266:	9e ad       	ldd	r25, Y+62	; 0x3e
    1268:	9a af       	std	Y+58, r25	; 0x3a
    126a:	89 af       	std	Y+57, r24	; 0x39
    126c:	89 ad       	ldd	r24, Y+57	; 0x39
    126e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <main+0x448>
    1274:	9a af       	std	Y+58, r25	; 0x3a
    1276:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);
		PORTC = (PORTC & 0xC0) | (1 << 2);
    1278:	a5 e3       	ldi	r26, 0x35	; 53
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 7c       	andi	r24, 0xC0	; 192
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (m % 10);
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	28 2f       	mov	r18, r24
    1294:	20 7f       	andi	r18, 0xF0	; 240
    1296:	80 91 77 00 	lds	r24, 0x0077
    129a:	9a e0       	ldi	r25, 0x0A	; 10
    129c:	69 2f       	mov	r22, r25
    129e:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
    12a2:	89 2f       	mov	r24, r25
    12a4:	82 2b       	or	r24, r18
    12a6:	8c 93       	st	X, r24
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e4       	ldi	r27, 0x40	; 64
    12b0:	8d ab       	std	Y+53, r24	; 0x35
    12b2:	9e ab       	std	Y+54, r25	; 0x36
    12b4:	af ab       	std	Y+55, r26	; 0x37
    12b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b8:	6d a9       	ldd	r22, Y+53	; 0x35
    12ba:	7e a9       	ldd	r23, Y+54	; 0x36
    12bc:	8f a9       	ldd	r24, Y+55	; 0x37
    12be:	98 ad       	ldd	r25, Y+56	; 0x38
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	4a e7       	ldi	r20, 0x7A	; 122
    12c6:	53 e4       	ldi	r21, 0x43	; 67
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	89 ab       	std	Y+49, r24	; 0x31
    12d2:	9a ab       	std	Y+50, r25	; 0x32
    12d4:	ab ab       	std	Y+51, r26	; 0x33
    12d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d8:	69 a9       	ldd	r22, Y+49	; 0x31
    12da:	7a a9       	ldd	r23, Y+50	; 0x32
    12dc:	8b a9       	ldd	r24, Y+51	; 0x33
    12de:	9c a9       	ldd	r25, Y+52	; 0x34
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	2c f4       	brge	.+10     	; 0x12fa <main+0x4d2>
		__ticks = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	98 ab       	std	Y+48, r25	; 0x30
    12f6:	8f a7       	std	Y+47, r24	; 0x2f
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <main+0x550>
	else if (__tmp > 65535)
    12fa:	69 a9       	ldd	r22, Y+49	; 0x31
    12fc:	7a a9       	ldd	r23, Y+50	; 0x32
    12fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1300:	9c a9       	ldd	r25, Y+52	; 0x34
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130e:	18 16       	cp	r1, r24
    1310:	4c f5       	brge	.+82     	; 0x1364 <main+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	6d a9       	ldd	r22, Y+53	; 0x35
    1314:	7e a9       	ldd	r23, Y+54	; 0x36
    1316:	8f a9       	ldd	r24, Y+55	; 0x37
    1318:	98 ad       	ldd	r25, Y+56	; 0x38
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
    133a:	0f c0       	rjmp	.+30     	; 0x135a <main+0x532>
    133c:	89 e1       	ldi	r24, 0x19	; 25
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9e a7       	std	Y+46, r25	; 0x2e
    1342:	8d a7       	std	Y+45, r24	; 0x2d
    1344:	8d a5       	ldd	r24, Y+45	; 0x2d
    1346:	9e a5       	ldd	r25, Y+46	; 0x2e
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <main+0x520>
    134c:	9e a7       	std	Y+46, r25	; 0x2e
    134e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	8f a5       	ldd	r24, Y+47	; 0x2f
    1352:	98 a9       	ldd	r25, Y+48	; 0x30
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	98 ab       	std	Y+48, r25	; 0x30
    1358:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135a:	8f a5       	ldd	r24, Y+47	; 0x2f
    135c:	98 a9       	ldd	r25, Y+48	; 0x30
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	69 f7       	brne	.-38     	; 0x133c <main+0x514>
    1362:	14 c0       	rjmp	.+40     	; 0x138c <main+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	69 a9       	ldd	r22, Y+49	; 0x31
    1366:	7a a9       	ldd	r23, Y+50	; 0x32
    1368:	8b a9       	ldd	r24, Y+51	; 0x33
    136a:	9c a9       	ldd	r25, Y+52	; 0x34
    136c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	98 ab       	std	Y+48, r25	; 0x30
    1376:	8f a7       	std	Y+47, r24	; 0x2f
    1378:	8f a5       	ldd	r24, Y+47	; 0x2f
    137a:	98 a9       	ldd	r25, Y+48	; 0x30
    137c:	9c a7       	std	Y+44, r25	; 0x2c
    137e:	8b a7       	std	Y+43, r24	; 0x2b
    1380:	8b a5       	ldd	r24, Y+43	; 0x2b
    1382:	9c a5       	ldd	r25, Y+44	; 0x2c
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <main+0x55c>
    1388:	9c a7       	std	Y+44, r25	; 0x2c
    138a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		PORTC = (PORTC & 0xC0) | (1 << 3);
    138c:	a5 e3       	ldi	r26, 0x35	; 53
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 7c       	andi	r24, 0xC0	; 192
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (m / 10);
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	20 7f       	andi	r18, 0xF0	; 240
    13aa:	80 91 77 00 	lds	r24, 0x0077
    13ae:	9a e0       	ldi	r25, 0x0A	; 10
    13b0:	69 2f       	mov	r22, r25
    13b2:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
    13b6:	82 2b       	or	r24, r18
    13b8:	8c 93       	st	X, r24
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e4       	ldi	r27, 0x40	; 64
    13c2:	8f a3       	std	Y+39, r24	; 0x27
    13c4:	98 a7       	std	Y+40, r25	; 0x28
    13c6:	a9 a7       	std	Y+41, r26	; 0x29
    13c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	6f a1       	ldd	r22, Y+39	; 0x27
    13cc:	78 a5       	ldd	r23, Y+40	; 0x28
    13ce:	89 a5       	ldd	r24, Y+41	; 0x29
    13d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a e7       	ldi	r20, 0x7A	; 122
    13d8:	53 e4       	ldi	r21, 0x43	; 67
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8b a3       	std	Y+35, r24	; 0x23
    13e4:	9c a3       	std	Y+36, r25	; 0x24
    13e6:	ad a3       	std	Y+37, r26	; 0x25
    13e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ea:	6b a1       	ldd	r22, Y+35	; 0x23
    13ec:	7c a1       	ldd	r23, Y+36	; 0x24
    13ee:	8d a1       	ldd	r24, Y+37	; 0x25
    13f0:	9e a1       	ldd	r25, Y+38	; 0x26
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <main+0x5e4>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9a a3       	std	Y+34, r25	; 0x22
    1408:	89 a3       	std	Y+33, r24	; 0x21
    140a:	3f c0       	rjmp	.+126    	; 0x148a <main+0x662>
	else if (__tmp > 65535)
    140c:	6b a1       	ldd	r22, Y+35	; 0x23
    140e:	7c a1       	ldd	r23, Y+36	; 0x24
    1410:	8d a1       	ldd	r24, Y+37	; 0x25
    1412:	9e a1       	ldd	r25, Y+38	; 0x26
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <main+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	6f a1       	ldd	r22, Y+39	; 0x27
    1426:	78 a5       	ldd	r23, Y+40	; 0x28
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9a a5       	ldd	r25, Y+42	; 0x2a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
    144c:	0f c0       	rjmp	.+30     	; 0x146c <main+0x644>
    144e:	89 e1       	ldi	r24, 0x19	; 25
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	98 a3       	std	Y+32, r25	; 0x20
    1454:	8f 8f       	std	Y+31, r24	; 0x1f
    1456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1458:	98 a1       	ldd	r25, Y+32	; 0x20
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <main+0x632>
    145e:	98 a3       	std	Y+32, r25	; 0x20
    1460:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	89 a1       	ldd	r24, Y+33	; 0x21
    1464:	9a a1       	ldd	r25, Y+34	; 0x22
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	89 a1       	ldd	r24, Y+33	; 0x21
    146e:	9a a1       	ldd	r25, Y+34	; 0x22
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <main+0x626>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <main+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	6b a1       	ldd	r22, Y+35	; 0x23
    1478:	7c a1       	ldd	r23, Y+36	; 0x24
    147a:	8d a1       	ldd	r24, Y+37	; 0x25
    147c:	9e a1       	ldd	r25, Y+38	; 0x26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	9e 8f       	std	Y+30, r25	; 0x1e
    1490:	8d 8f       	std	Y+29, r24	; 0x1d
    1492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1494:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <main+0x66e>
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		PORTC = (PORTC & 0xC0) | (1 << 4);
    149e:	a5 e3       	ldi	r26, 0x35	; 53
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e3       	ldi	r30, 0x35	; 53
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 7c       	andi	r24, 0xC0	; 192
    14aa:	80 61       	ori	r24, 0x10	; 16
    14ac:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (h % 10);
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	20 7f       	andi	r18, 0xF0	; 240
    14bc:	80 91 78 00 	lds	r24, 0x0078
    14c0:	9a e0       	ldi	r25, 0x0A	; 10
    14c2:	69 2f       	mov	r22, r25
    14c4:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
    14c8:	89 2f       	mov	r24, r25
    14ca:	82 2b       	or	r24, r18
    14cc:	8c 93       	st	X, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	89 8f       	std	Y+25, r24	; 0x19
    14d8:	9a 8f       	std	Y+26, r25	; 0x1a
    14da:	ab 8f       	std	Y+27, r26	; 0x1b
    14dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	69 8d       	ldd	r22, Y+25	; 0x19
    14e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8d 8b       	std	Y+21, r24	; 0x15
    14f8:	9e 8b       	std	Y+22, r25	; 0x16
    14fa:	af 8b       	std	Y+23, r26	; 0x17
    14fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <main+0x6f8>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	3f c0       	rjmp	.+126    	; 0x159e <main+0x776>
	else if (__tmp > 65535)
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <main+0x762>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <main+0x758>
    1562:	89 e1       	ldi	r24, 0x19	; 25
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9a 8b       	std	Y+18, r25	; 0x12
    1568:	89 8b       	std	Y+17, r24	; 0x11
    156a:	89 89       	ldd	r24, Y+17	; 0x11
    156c:	9a 89       	ldd	r25, Y+18	; 0x12
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <main+0x746>
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <main+0x73a>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <main+0x78a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	8b 8b       	std	Y+19, r24	; 0x13
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	8f 87       	std	Y+15, r24	; 0x0f
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x782>
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		PORTC = (PORTC & 0xC0) | (1 << 5);
    15b2:	a5 e3       	ldi	r26, 0x35	; 53
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e3       	ldi	r30, 0x35	; 53
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 7c       	andi	r24, 0xC0	; 192
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	8c 93       	st	X, r24
		PORTA = (PORTA & 0xF0) | (h / 10);
    15c2:	ab e3       	ldi	r26, 0x3B	; 59
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	eb e3       	ldi	r30, 0x3B	; 59
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	20 7f       	andi	r18, 0xF0	; 240
    15d0:	80 91 78 00 	lds	r24, 0x0078
    15d4:	9a e0       	ldi	r25, 0x0A	; 10
    15d6:	69 2f       	mov	r22, r25
    15d8:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodqi4>
    15dc:	82 2b       	or	r24, r18
    15de:	8c 93       	st	X, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e4       	ldi	r27, 0x40	; 64
    15e8:	8b 87       	std	Y+11, r24	; 0x0b
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
    15ec:	ad 87       	std	Y+13, r26	; 0x0d
    15ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8f 83       	std	Y+7, r24	; 0x07
    160a:	98 87       	std	Y+8, r25	; 0x08
    160c:	a9 87       	std	Y+9, r26	; 0x09
    160e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <main+0x80a>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <main+0x888>
	else if (__tmp > 65535)
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <main+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <main+0x86a>
    1674:	89 e1       	ldi	r24, 0x19	; 25
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <main+0x858>
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <main+0x84c>
    169a:	87 cc       	rjmp	.-1778   	; 0xfaa <main+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <main+0x894>
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	72 cc       	rjmp	.-1820   	; 0xfaa <main+0x182>

000016c6 <update_time>:
		_delay_ms(2);
	}
}


void update_time(void) {
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	if (s < 59)
    16ce:	80 91 76 00 	lds	r24, 0x0076
    16d2:	8b 33       	cpi	r24, 0x3B	; 59
    16d4:	30 f4       	brcc	.+12     	; 0x16e2 <update_time+0x1c>
		s++;
    16d6:	80 91 76 00 	lds	r24, 0x0076
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 93 76 00 	sts	0x0076, r24
    16e0:	1a c0       	rjmp	.+52     	; 0x1716 <update_time+0x50>
	else {
		s = 0;
    16e2:	10 92 76 00 	sts	0x0076, r1
		if (m < 59)
    16e6:	80 91 77 00 	lds	r24, 0x0077
    16ea:	8b 33       	cpi	r24, 0x3B	; 59
    16ec:	30 f4       	brcc	.+12     	; 0x16fa <update_time+0x34>
			m++;
    16ee:	80 91 77 00 	lds	r24, 0x0077
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	80 93 77 00 	sts	0x0077, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <update_time+0x50>
		else {
			m = 0;
    16fa:	10 92 77 00 	sts	0x0077, r1
			if (h < 99)
    16fe:	80 91 78 00 	lds	r24, 0x0078
    1702:	83 36       	cpi	r24, 0x63	; 99
    1704:	30 f4       	brcc	.+12     	; 0x1712 <update_time+0x4c>
				h++;
    1706:	80 91 78 00 	lds	r24, 0x0078
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	80 93 78 00 	sts	0x0078, r24
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <update_time+0x50>
			else
				h = 0;
    1712:	10 92 78 00 	sts	0x0078, r1
		}

	}
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <reset>:

void reset(void) {
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	h = m = s = 0;
    1724:	10 92 76 00 	sts	0x0076, r1
    1728:	80 91 76 00 	lds	r24, 0x0076
    172c:	80 93 77 00 	sts	0x0077, r24
    1730:	80 91 77 00 	lds	r24, 0x0077
    1734:	80 93 78 00 	sts	0x0078, r24
	TCCR1B &= ~(1 << CS11) & ~(1 << CS10);
    1738:	ae e4       	ldi	r26, 0x4E	; 78
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ee e4       	ldi	r30, 0x4E	; 78
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8c 7f       	andi	r24, 0xFC	; 252
    1744:	8c 93       	st	X, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <pause>:

void pause(void) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS11) & ~(1 << CS10);
    1754:	ae e4       	ldi	r26, 0x4E	; 78
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ee e4       	ldi	r30, 0x4E	; 78
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8c 7f       	andi	r24, 0xFC	; 252
    1760:	8c 93       	st	X, r24
}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <resume>:

void resume(void) {
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS11) | (1 << CS10);
    1770:	ae e4       	ldi	r26, 0x4E	; 78
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ee e4       	ldi	r30, 0x4E	; 78
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	83 60       	ori	r24, 0x03	; 3
    177c:	8c 93       	st	X, r24
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <__vector_9>:
static volatile void (*g_timer2_overflow)(void) = NULL_PTR;
static volatile void (*g_timer2_compare)(void) = NULL_PTR;


/* Interrupt Sevice Routines of all timers modules and modes */
ISR(TIMER0_OVF_vect) {
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_overflow != NULL_PTR)
    17ae:	80 91 79 00 	lds	r24, 0x0079
    17b2:	90 91 7a 00 	lds	r25, 0x007A
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	29 f0       	breq	.+10     	; 0x17c4 <__vector_9+0x40>
		(*g_timer0_overflow)();
    17ba:	e0 91 79 00 	lds	r30, 0x0079
    17be:	f0 91 7a 00 	lds	r31, 0x007A
    17c2:	09 95       	icall
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_19>:

ISR(TIMER0_COMP_vect) {
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	2f 93       	push	r18
    17f6:	3f 93       	push	r19
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0_compare != NULL_PTR)
    1814:	80 91 7b 00 	lds	r24, 0x007B
    1818:	90 91 7c 00 	lds	r25, 0x007C
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	29 f0       	breq	.+10     	; 0x182a <__vector_19+0x40>
		(*g_timer0_compare)();
    1820:	e0 91 7b 00 	lds	r30, 0x007B
    1824:	f0 91 7c 00 	lds	r31, 0x007C
    1828:	09 95       	icall
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <__vector_8>:

ISR(TIMER1_OVF_vect) {
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	11 24       	eor	r1, r1
    185a:	2f 93       	push	r18
    185c:	3f 93       	push	r19
    185e:	4f 93       	push	r20
    1860:	5f 93       	push	r21
    1862:	6f 93       	push	r22
    1864:	7f 93       	push	r23
    1866:	8f 93       	push	r24
    1868:	9f 93       	push	r25
    186a:	af 93       	push	r26
    186c:	bf 93       	push	r27
    186e:	ef 93       	push	r30
    1870:	ff 93       	push	r31
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_overflow != NULL_PTR)
    187a:	80 91 7d 00 	lds	r24, 0x007D
    187e:	90 91 7e 00 	lds	r25, 0x007E
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	29 f0       	breq	.+10     	; 0x1890 <__vector_8+0x40>
		(*g_timer1_overflow)();
    1886:	e0 91 7d 00 	lds	r30, 0x007D
    188a:	f0 91 7e 00 	lds	r31, 0x007E
    188e:	09 95       	icall
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_6>:

ISR(TIMER1_COMPA_vect) {
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_compareA != NULL_PTR)
    18e0:	80 91 7f 00 	lds	r24, 0x007F
    18e4:	90 91 80 00 	lds	r25, 0x0080
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	29 f0       	breq	.+10     	; 0x18f6 <__vector_6+0x40>
		(*g_timer1_compareA)();
    18ec:	e0 91 7f 00 	lds	r30, 0x007F
    18f0:	f0 91 80 00 	lds	r31, 0x0080
    18f4:	09 95       	icall
}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <__vector_7>:

ISR(TIMER1_COMPB_vect) {
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1_compareB != NULL_PTR)
    1946:	80 91 81 00 	lds	r24, 0x0081
    194a:	90 91 82 00 	lds	r25, 0x0082
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	29 f0       	breq	.+10     	; 0x195c <__vector_7+0x40>
		(*g_timer1_compareB)();
    1952:	e0 91 81 00 	lds	r30, 0x0081
    1956:	f0 91 82 00 	lds	r31, 0x0082
    195a:	09 95       	icall
}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	ff 91       	pop	r31
    1962:	ef 91       	pop	r30
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_4>:

ISR(TIMER2_OVF_vect) {
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_overflow != NULL_PTR)
    19ac:	80 91 83 00 	lds	r24, 0x0083
    19b0:	90 91 84 00 	lds	r25, 0x0084
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	29 f0       	breq	.+10     	; 0x19c2 <__vector_4+0x40>
		(*g_timer2_overflow)();
    19b8:	e0 91 83 00 	lds	r30, 0x0083
    19bc:	f0 91 84 00 	lds	r31, 0x0084
    19c0:	09 95       	icall
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	ff 91       	pop	r31
    19c8:	ef 91       	pop	r30
    19ca:	bf 91       	pop	r27
    19cc:	af 91       	pop	r26
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_3>:

ISR(TIMER2_COMP_vect) {
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	4f 93       	push	r20
    19f8:	5f 93       	push	r21
    19fa:	6f 93       	push	r22
    19fc:	7f 93       	push	r23
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
    1a06:	ef 93       	push	r30
    1a08:	ff 93       	push	r31
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2_compare != NULL_PTR)
    1a12:	80 91 85 00 	lds	r24, 0x0085
    1a16:	90 91 86 00 	lds	r25, 0x0086
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	29 f0       	breq	.+10     	; 0x1a28 <__vector_3+0x40>
		(*g_timer2_compare)();
    1a1e:	e0 91 85 00 	lds	r30, 0x0085
    1a22:	f0 91 86 00 	lds	r31, 0x0086
    1a26:	09 95       	icall
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	7f 91       	pop	r23
    1a3a:	6f 91       	pop	r22
    1a3c:	5f 91       	pop	r21
    1a3e:	4f 91       	pop	r20
    1a40:	3f 91       	pop	r19
    1a42:	2f 91       	pop	r18
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <TIMERS_init>:


void TIMERS_init(const TIMERS_ConfigType * const config_ptr) {
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <TIMERS_init+0x6>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	 * TOIE1  = x		TIMER1 overflow interrupt enable
	 * OCIE0  = x		TIMER0 output compare match interrupt enable
	 * TOIE0  = x		TIMER0 overflow interrupt enable
	 */

	if (config_ptr->num == TIMER1 || config_ptr->num == TIMER1A || config_ptr->num == TIMER1B) {
    1a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a60:	80 81       	ld	r24, Z
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <TIMERS_init+0x2e>
    1a66:	e9 81       	ldd	r30, Y+1	; 0x01
    1a68:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <TIMERS_init+0x2e>
    1a70:	e9 81       	ldd	r30, Y+1	; 0x01
    1a72:	fa 81       	ldd	r31, Y+2	; 0x02
    1a74:	80 81       	ld	r24, Z
    1a76:	83 30       	cpi	r24, 0x03	; 3
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <TIMERS_init+0x2e>
    1a7a:	34 c1       	rjmp	.+616    	; 0x1ce4 <TIMERS_init+0x296>
		 * FOC1B    = x		force output compare for channel B
		 * WGM11:0  = xx	waveform generation mode
		 */

		/* set waveform generation mode */
		TCCR1A = (config_ptr->mode & 0x03);
    1a7c:	af e4       	ldi	r26, 0x4F	; 79
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	81 81       	ldd	r24, Z+1	; 0x01
    1a86:	83 70       	andi	r24, 0x03	; 3
    1a88:	8c 93       	st	X, r24

		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC_OCR1A || config_ptr->mode == CTC_ICR1) {
    1a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	88 23       	and	r24, r24
    1a92:	51 f0       	breq	.+20     	; 0x1aa8 <TIMERS_init+0x5a>
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	81 81       	ldd	r24, Z+1	; 0x01
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <TIMERS_init+0x5a>
    1a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa2:	81 81       	ldd	r24, Z+1	; 0x01
    1aa4:	8c 30       	cpi	r24, 0x0C	; 12
    1aa6:	31 f5       	brne	.+76     	; 0x1af4 <TIMERS_init+0xa6>
			if (config_ptr->num == TIMER1)
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	80 81       	ld	r24, Z
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <TIMERS_init+0x74>
				TCCR1A |= 0x0C;
    1ab2:	af e4       	ldi	r26, 0x4F	; 79
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ef e4       	ldi	r30, 0x4F	; 79
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8c 60       	ori	r24, 0x0C	; 12
    1abe:	8c 93       	st	X, r24
    1ac0:	19 c0       	rjmp	.+50     	; 0x1af4 <TIMERS_init+0xa6>
			else if (config_ptr->num == TIMER1A)
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac6:	80 81       	ld	r24, Z
    1ac8:	82 30       	cpi	r24, 0x02	; 2
    1aca:	41 f4       	brne	.+16     	; 0x1adc <TIMERS_init+0x8e>
				SET_BIT(TCCR1A,FOC1A);
    1acc:	af e4       	ldi	r26, 0x4F	; 79
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ef e4       	ldi	r30, 0x4F	; 79
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	8c 93       	st	X, r24
    1ada:	0c c0       	rjmp	.+24     	; 0x1af4 <TIMERS_init+0xa6>
			else if (config_ptr->num == TIMER1B)
    1adc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ade:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae0:	80 81       	ld	r24, Z
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	39 f4       	brne	.+14     	; 0x1af4 <TIMERS_init+0xa6>
				SET_BIT(TCCR1A,FOC1B);
    1ae6:	af e4       	ldi	r26, 0x4F	; 79
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ef e4       	ldi	r30, 0x4F	; 79
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	84 60       	ori	r24, 0x04	; 4
    1af2:	8c 93       	st	X, r24
		}

		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC){
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	83 81       	ldd	r24, Z+3	; 0x03
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <TIMERS_init+0xb2>
    1afe:	72 c0       	rjmp	.+228    	; 0x1be4 <TIMERS_init+0x196>
			if (config_ptr->num == TIMER1) {
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	80 81       	ld	r24, Z
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	59 f5       	brne	.+86     	; 0x1b60 <TIMERS_init+0x112>
				TCCR1A |= (config_ptr->compare << 4) | (config_ptr->compare << 6);
    1b0a:	af e4       	ldi	r26, 0x4F	; 79
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ef e4       	ldi	r30, 0x4F	; 79
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	38 2f       	mov	r19, r24
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	83 81       	ldd	r24, Z+3	; 0x03
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	82 95       	swap	r24
    1b22:	92 95       	swap	r25
    1b24:	90 7f       	andi	r25, 0xF0	; 240
    1b26:	98 27       	eor	r25, r24
    1b28:	80 7f       	andi	r24, 0xF0	; 240
    1b2a:	98 27       	eor	r25, r24
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	83 81       	ldd	r24, Z+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	00 24       	eor	r0, r0
    1b3a:	96 95       	lsr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	07 94       	ror	r0
    1b40:	96 95       	lsr	r25
    1b42:	87 95       	ror	r24
    1b44:	07 94       	ror	r0
    1b46:	98 2f       	mov	r25, r24
    1b48:	80 2d       	mov	r24, r0
    1b4a:	82 2b       	or	r24, r18
    1b4c:	83 2b       	or	r24, r19
    1b4e:	8c 93       	st	X, r24
				DDRD |= 0x30;				/* set pins OC1A and OC1B as output pins */
    1b50:	a1 e3       	ldi	r26, 0x31	; 49
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e1 e3       	ldi	r30, 0x31	; 49
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 63       	ori	r24, 0x30	; 48
    1b5c:	8c 93       	st	X, r24
    1b5e:	42 c0       	rjmp	.+132    	; 0x1be4 <TIMERS_init+0x196>
			}

			else if (config_ptr->num == TIMER1A) {
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	80 81       	ld	r24, Z
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	f1 f4       	brne	.+60     	; 0x1ba6 <TIMERS_init+0x158>
				TCCR1A |= (config_ptr->compare << 6);
    1b6a:	af e4       	ldi	r26, 0x4F	; 79
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ef e4       	ldi	r30, 0x4F	; 79
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	28 2f       	mov	r18, r24
    1b76:	e9 81       	ldd	r30, Y+1	; 0x01
    1b78:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7a:	83 81       	ldd	r24, Z+3	; 0x03
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	00 24       	eor	r0, r0
    1b82:	96 95       	lsr	r25
    1b84:	87 95       	ror	r24
    1b86:	07 94       	ror	r0
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	07 94       	ror	r0
    1b8e:	98 2f       	mov	r25, r24
    1b90:	80 2d       	mov	r24, r0
    1b92:	82 2b       	or	r24, r18
    1b94:	8c 93       	st	X, r24
				SET_BIT(DDRD,PD5);			/* set pin OC1A (PD5) as output pin */
    1b96:	a1 e3       	ldi	r26, 0x31	; 49
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e1 e3       	ldi	r30, 0x31	; 49
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 62       	ori	r24, 0x20	; 32
    1ba2:	8c 93       	st	X, r24
    1ba4:	1f c0       	rjmp	.+62     	; 0x1be4 <TIMERS_init+0x196>
			}

			else if (config_ptr->num == TIMER1B) {
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	80 81       	ld	r24, Z
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	d1 f4       	brne	.+52     	; 0x1be4 <TIMERS_init+0x196>
				TCCR1A |= (config_ptr->compare << 4);
    1bb0:	af e4       	ldi	r26, 0x4F	; 79
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ef e4       	ldi	r30, 0x4F	; 79
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	28 2f       	mov	r18, r24
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	83 81       	ldd	r24, Z+3	; 0x03
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	82 95       	swap	r24
    1bc8:	92 95       	swap	r25
    1bca:	90 7f       	andi	r25, 0xF0	; 240
    1bcc:	98 27       	eor	r25, r24
    1bce:	80 7f       	andi	r24, 0xF0	; 240
    1bd0:	98 27       	eor	r25, r24
    1bd2:	82 2b       	or	r24, r18
    1bd4:	8c 93       	st	X, r24
				SET_BIT(DDRD,PD4);			/* set pin OC1B (PD4) as output pin */
    1bd6:	a1 e3       	ldi	r26, 0x31	; 49
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 e3       	ldi	r30, 0x31	; 49
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 61       	ori	r24, 0x10	; 16
    1be2:	8c 93       	st	X, r24
		 * WGM13:2 = xx		waveform generation mode
		 * CS12:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR1B = config_ptr->clock;
    1be4:	ae e4       	ldi	r26, 0x4E	; 78
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	8c 93       	st	X, r24

		/* set waveform generation mode */
		TCCR1B = (TCCR1B & 0xE7) | ((config_ptr->mode & 0x0C) << 1);
    1bf0:	ae e4       	ldi	r26, 0x4E	; 78
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee e4       	ldi	r30, 0x4E	; 78
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	27 7e       	andi	r18, 0xE7	; 231
    1bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1c00:	fa 81       	ldd	r31, Y+2	; 0x02
    1c02:	81 81       	ldd	r24, Z+1	; 0x01
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	8c 70       	andi	r24, 0x0C	; 12
    1c0a:	90 70       	andi	r25, 0x00	; 0
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	82 2b       	or	r24, r18
    1c12:	8c 93       	st	X, r24


		/* set initial value */
		TCNT1 = config_ptr->initial_value;
    1c14:	ac e4       	ldi	r26, 0x4C	; 76
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	84 81       	ldd	r24, Z+4	; 0x04
    1c1e:	95 81       	ldd	r25, Z+5	; 0x05
    1c20:	11 96       	adiw	r26, 0x01	; 1
    1c22:	9c 93       	st	X, r25
    1c24:	8e 93       	st	-X, r24

		/* set compare value */
		if (config_ptr->num == TIMER1) {
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	80 81       	ld	r24, Z
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	99 f4       	brne	.+38     	; 0x1c56 <TIMERS_init+0x208>
			OCR1A = config_ptr->compare_value;
    1c30:	aa e4       	ldi	r26, 0x4A	; 74
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	86 81       	ldd	r24, Z+6	; 0x06
    1c3a:	97 81       	ldd	r25, Z+7	; 0x07
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	9c 93       	st	X, r25
    1c40:	8e 93       	st	-X, r24
			OCR1B = config_ptr->compare_value;
    1c42:	a8 e4       	ldi	r26, 0x48	; 72
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e9 81       	ldd	r30, Y+1	; 0x01
    1c48:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4a:	86 81       	ldd	r24, Z+6	; 0x06
    1c4c:	97 81       	ldd	r25, Z+7	; 0x07
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
    1c54:	1f c0       	rjmp	.+62     	; 0x1c94 <TIMERS_init+0x246>
		}
		else if (config_ptr->num == TIMER1A)
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	80 81       	ld	r24, Z
    1c5c:	82 30       	cpi	r24, 0x02	; 2
    1c5e:	59 f4       	brne	.+22     	; 0x1c76 <TIMERS_init+0x228>
			OCR1A = config_ptr->compare_value;
    1c60:	ea e4       	ldi	r30, 0x4A	; 74
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	a9 81       	ldd	r26, Y+1	; 0x01
    1c66:	ba 81       	ldd	r27, Y+2	; 0x02
    1c68:	16 96       	adiw	r26, 0x06	; 6
    1c6a:	8d 91       	ld	r24, X+
    1c6c:	9c 91       	ld	r25, X
    1c6e:	17 97       	sbiw	r26, 0x07	; 7
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <TIMERS_init+0x246>
		else if (config_ptr->num == TIMER1B)
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	80 81       	ld	r24, Z
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	51 f4       	brne	.+20     	; 0x1c94 <TIMERS_init+0x246>
			OCR1B = config_ptr->compare_value;
    1c80:	e8 e4       	ldi	r30, 0x48	; 72
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	a9 81       	ldd	r26, Y+1	; 0x01
    1c86:	ba 81       	ldd	r27, Y+2	; 0x02
    1c88:	16 96       	adiw	r26, 0x06	; 6
    1c8a:	8d 91       	ld	r24, X+
    1c8c:	9c 91       	ld	r25, X
    1c8e:	17 97       	sbiw	r26, 0x07	; 7
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24

		/* enable interrupt */
		if (config_ptr->num == TIMER1)
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	80 81       	ld	r24, Z
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	41 f4       	brne	.+16     	; 0x1cae <TIMERS_init+0x260>
			SET_BIT(TIMSK,TOIE1);
    1c9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e9 e5       	ldi	r30, 0x59	; 89
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	84 60       	ori	r24, 0x04	; 4
    1caa:	8c 93       	st	X, r24
    1cac:	2f c1       	rjmp	.+606    	; 0x1f0c <TIMERS_init+0x4be>
		else if (config_ptr->num == TIMER1A)
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	80 81       	ld	r24, Z
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	41 f4       	brne	.+16     	; 0x1cc8 <TIMERS_init+0x27a>
			SET_BIT(TIMSK,OCIE1A);
    1cb8:	a9 e5       	ldi	r26, 0x59	; 89
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e9 e5       	ldi	r30, 0x59	; 89
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 61       	ori	r24, 0x10	; 16
    1cc4:	8c 93       	st	X, r24
    1cc6:	22 c1       	rjmp	.+580    	; 0x1f0c <TIMERS_init+0x4be>
		else if (config_ptr->num == TIMER1B)
    1cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ccc:	80 81       	ld	r24, Z
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <TIMERS_init+0x286>
    1cd2:	1c c1       	rjmp	.+568    	; 0x1f0c <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE1B);
    1cd4:	a9 e5       	ldi	r26, 0x59	; 89
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e9 e5       	ldi	r30, 0x59	; 89
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 60       	ori	r24, 0x08	; 8
    1ce0:	8c 93       	st	X, r24
    1ce2:	14 c1       	rjmp	.+552    	; 0x1f0c <TIMERS_init+0x4be>
	}

	else if (config_ptr->num == TIMER0) {
    1ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce8:	80 81       	ld	r24, Z
    1cea:	88 23       	and	r24, r24
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <TIMERS_init+0x2a2>
    1cee:	85 c0       	rjmp	.+266    	; 0x1dfa <TIMERS_init+0x3ac>
		 * WGM01   = x		waveform generation mode
		 * CS02:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR0 = config_ptr->clock;
    1cf0:	a3 e5       	ldi	r26, 0x53	; 83
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	8c 93       	st	X, r24

		/* set waveform generation mode */
		if (config_ptr->mode == PWM_PHASE_CORRECT)
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	81 81       	ldd	r24, Z+1	; 0x01
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	41 f4       	brne	.+16     	; 0x1d16 <TIMERS_init+0x2c8>
			SET_BIT(TCCR0,WGM00);
    1d06:	a3 e5       	ldi	r26, 0x53	; 83
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e3 e5       	ldi	r30, 0x53	; 83
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 64       	ori	r24, 0x40	; 64
    1d12:	8c 93       	st	X, r24
    1d14:	19 c0       	rjmp	.+50     	; 0x1d48 <TIMERS_init+0x2fa>
		else if (config_ptr->mode == CTC)
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	81 81       	ldd	r24, Z+1	; 0x01
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	41 f4       	brne	.+16     	; 0x1d30 <TIMERS_init+0x2e2>
			SET_BIT(TCCR0,WGM01);
    1d20:	a3 e5       	ldi	r26, 0x53	; 83
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 60       	ori	r24, 0x08	; 8
    1d2c:	8c 93       	st	X, r24
    1d2e:	0c c0       	rjmp	.+24     	; 0x1d48 <TIMERS_init+0x2fa>
		else if (config_ptr->mode == FAST_PWM)
    1d30:	e9 81       	ldd	r30, Y+1	; 0x01
    1d32:	fa 81       	ldd	r31, Y+2	; 0x02
    1d34:	81 81       	ldd	r24, Z+1	; 0x01
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <TIMERS_init+0x2fa>
			TCCR0 |= 0x48;
    1d3a:	a3 e5       	ldi	r26, 0x53	; 83
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 e5       	ldi	r30, 0x53	; 83
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	88 64       	ori	r24, 0x48	; 72
    1d46:	8c 93       	st	X, r24
		
		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC) {
    1d48:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4c:	83 81       	ldd	r24, Z+3	; 0x03
    1d4e:	88 23       	and	r24, r24
    1d50:	d1 f0       	breq	.+52     	; 0x1d86 <TIMERS_init+0x338>
			TCCR0 |= (config_ptr->compare << 4);
    1d52:	a3 e5       	ldi	r26, 0x53	; 83
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e3 e5       	ldi	r30, 0x53	; 83
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d60:	fa 81       	ldd	r31, Y+2	; 0x02
    1d62:	83 81       	ldd	r24, Z+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	82 95       	swap	r24
    1d6a:	92 95       	swap	r25
    1d6c:	90 7f       	andi	r25, 0xF0	; 240
    1d6e:	98 27       	eor	r25, r24
    1d70:	80 7f       	andi	r24, 0xF0	; 240
    1d72:	98 27       	eor	r25, r24
    1d74:	82 2b       	or	r24, r18
    1d76:	8c 93       	st	X, r24
			SET_BIT(DDRB,PB3);			/* set pin OC0 (PB3) as output pin */
    1d78:	a7 e3       	ldi	r26, 0x37	; 55
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e7 e3       	ldi	r30, 0x37	; 55
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	88 60       	ori	r24, 0x08	; 8
    1d84:	8c 93       	st	X, r24
		}
		
		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC)
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	81 81       	ldd	r24, Z+1	; 0x01
    1d8c:	88 23       	and	r24, r24
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <TIMERS_init+0x34c>
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	39 f4       	brne	.+14     	; 0x1da8 <TIMERS_init+0x35a>
			SET_BIT(TCCR0,FOC0);
    1d9a:	a3 e5       	ldi	r26, 0x53	; 83
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 e5       	ldi	r30, 0x53	; 83
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	8c 93       	st	X, r24


		/* set initial value */
		TCNT0 = config_ptr->initial_value;
    1da8:	a2 e5       	ldi	r26, 0x52	; 82
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	84 81       	ldd	r24, Z+4	; 0x04
    1db2:	95 81       	ldd	r25, Z+5	; 0x05
    1db4:	8c 93       	st	X, r24

		/* set compare value */
		OCR0 = config_ptr->compare_value;
    1db6:	ac e5       	ldi	r26, 0x5C	; 92
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	86 81       	ldd	r24, Z+6	; 0x06
    1dc0:	97 81       	ldd	r25, Z+7	; 0x07
    1dc2:	8c 93       	st	X, r24
		
		/* enable interrupt */
		if (config_ptr->mode == NORMAL)
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	81 81       	ldd	r24, Z+1	; 0x01
    1dca:	88 23       	and	r24, r24
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <TIMERS_init+0x390>
			SET_BIT(TIMSK,TOIE0);
    1dce:	a9 e5       	ldi	r26, 0x59	; 89
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e9 e5       	ldi	r30, 0x59	; 89
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	81 60       	ori	r24, 0x01	; 1
    1dda:	8c 93       	st	X, r24
    1ddc:	97 c0       	rjmp	.+302    	; 0x1f0c <TIMERS_init+0x4be>
		else if (config_ptr->mode == CTC)
    1dde:	e9 81       	ldd	r30, Y+1	; 0x01
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	81 81       	ldd	r24, Z+1	; 0x01
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	09 f0       	breq	.+2      	; 0x1dea <TIMERS_init+0x39c>
    1de8:	91 c0       	rjmp	.+290    	; 0x1f0c <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE0);
    1dea:	a9 e5       	ldi	r26, 0x59	; 89
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e9 e5       	ldi	r30, 0x59	; 89
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	82 60       	ori	r24, 0x02	; 2
    1df6:	8c 93       	st	X, r24
    1df8:	89 c0       	rjmp	.+274    	; 0x1f0c <TIMERS_init+0x4be>
	}

	else if (config_ptr->num == TIMER2) {
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	80 81       	ld	r24, Z
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <TIMERS_init+0x3b8>
    1e04:	83 c0       	rjmp	.+262    	; 0x1f0c <TIMERS_init+0x4be>
		 * WGM21   = x		waveform generation mode
		 * CS22:0  = xxx	clock select
		 */

		/* set clock prescaler */
		TCCR2 = config_ptr->clock;
    1e06:	a5 e4       	ldi	r26, 0x45	; 69
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	8c 93       	st	X, r24

		/* set waveform generation mode */
		if (config_ptr->mode == PWM_PHASE_CORRECT)
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	81 81       	ldd	r24, Z+1	; 0x01
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	41 f4       	brne	.+16     	; 0x1e2c <TIMERS_init+0x3de>
			SET_BIT(TCCR2,WGM20);
    1e1c:	a5 e4       	ldi	r26, 0x45	; 69
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e4       	ldi	r30, 0x45	; 69
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 64       	ori	r24, 0x40	; 64
    1e28:	8c 93       	st	X, r24
    1e2a:	19 c0       	rjmp	.+50     	; 0x1e5e <TIMERS_init+0x410>
		else if (config_ptr->mode == CTC)
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	81 81       	ldd	r24, Z+1	; 0x01
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	41 f4       	brne	.+16     	; 0x1e46 <TIMERS_init+0x3f8>
			SET_BIT(TCCR2,WGM21);
    1e36:	a5 e4       	ldi	r26, 0x45	; 69
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e4       	ldi	r30, 0x45	; 69
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 60       	ori	r24, 0x08	; 8
    1e42:	8c 93       	st	X, r24
    1e44:	0c c0       	rjmp	.+24     	; 0x1e5e <TIMERS_init+0x410>
		else if (config_ptr->mode == FAST_PWM)
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	81 81       	ldd	r24, Z+1	; 0x01
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	39 f4       	brne	.+14     	; 0x1e5e <TIMERS_init+0x410>
			TCCR2 |= 0x48;
    1e50:	a5 e4       	ldi	r26, 0x45	; 69
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e5 e4       	ldi	r30, 0x45	; 69
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 64       	ori	r24, 0x48	; 72
    1e5c:	8c 93       	st	X, r24
		
		/* set compare match output mode */
		if (config_ptr->compare != DISCONNECT_OC) {
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	83 81       	ldd	r24, Z+3	; 0x03
    1e64:	88 23       	and	r24, r24
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <TIMERS_init+0x44e>
			TCCR2 |= (config_ptr->compare << 4);
    1e68:	a5 e4       	ldi	r26, 0x45	; 69
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e4       	ldi	r30, 0x45	; 69
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	28 2f       	mov	r18, r24
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	83 81       	ldd	r24, Z+3	; 0x03
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	82 95       	swap	r24
    1e80:	92 95       	swap	r25
    1e82:	90 7f       	andi	r25, 0xF0	; 240
    1e84:	98 27       	eor	r25, r24
    1e86:	80 7f       	andi	r24, 0xF0	; 240
    1e88:	98 27       	eor	r25, r24
    1e8a:	82 2b       	or	r24, r18
    1e8c:	8c 93       	st	X, r24
			SET_BIT(DDRD,PD7);			/* set pin OC2 (PD7) as output pin */
    1e8e:	a1 e3       	ldi	r26, 0x31	; 49
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e1 e3       	ldi	r30, 0x31	; 49
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	80 68       	ori	r24, 0x80	; 128
    1e9a:	8c 93       	st	X, r24
		}
		
		/* enable / disable force output compare */
		if (config_ptr->mode == NORMAL || config_ptr->mode == CTC)
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	88 23       	and	r24, r24
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <TIMERS_init+0x462>
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	81 81       	ldd	r24, Z+1	; 0x01
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	39 f4       	brne	.+14     	; 0x1ebe <TIMERS_init+0x470>
			SET_BIT(TCCR2,FOC2);
    1eb0:	a5 e4       	ldi	r26, 0x45	; 69
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e4       	ldi	r30, 0x45	; 69
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 68       	ori	r24, 0x80	; 128
    1ebc:	8c 93       	st	X, r24


		/* set initial value */
		TCNT2 = config_ptr->initial_value;
    1ebe:	a4 e4       	ldi	r26, 0x44	; 68
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	84 81       	ldd	r24, Z+4	; 0x04
    1ec8:	95 81       	ldd	r25, Z+5	; 0x05
    1eca:	8c 93       	st	X, r24

		/* set compare value */
		OCR2 = config_ptr->compare_value;
    1ecc:	a3 e4       	ldi	r26, 0x43	; 67
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	86 81       	ldd	r24, Z+6	; 0x06
    1ed6:	97 81       	ldd	r25, Z+7	; 0x07
    1ed8:	8c 93       	st	X, r24
		
		/* enable interrupt */
		if (config_ptr->mode == NORMAL)
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	88 23       	and	r24, r24
    1ee2:	41 f4       	brne	.+16     	; 0x1ef4 <TIMERS_init+0x4a6>
			SET_BIT(TIMSK,TOIE2);
    1ee4:	a9 e5       	ldi	r26, 0x59	; 89
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e9 e5       	ldi	r30, 0x59	; 89
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 64       	ori	r24, 0x40	; 64
    1ef0:	8c 93       	st	X, r24
    1ef2:	0c c0       	rjmp	.+24     	; 0x1f0c <TIMERS_init+0x4be>
		else if (config_ptr->mode == CTC)
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	81 81       	ldd	r24, Z+1	; 0x01
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	39 f4       	brne	.+14     	; 0x1f0c <TIMERS_init+0x4be>
			SET_BIT(TIMSK,OCIE2);
    1efe:	a9 e5       	ldi	r26, 0x59	; 89
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e9 e5       	ldi	r30, 0x59	; 89
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 68       	ori	r24, 0x80	; 128
    1f0a:	8c 93       	st	X, r24
	}
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <TIMERS_setCallBack>:

void TIMERS_setCallBack(TIMERS_Num num, TIMERS_Mode mode, void (*f_ptr)(void)) {
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <TIMERS_setCallBack+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <TIMERS_setCallBack+0x8>
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	6a 83       	std	Y+2, r22	; 0x02
    1f26:	5c 83       	std	Y+4, r21	; 0x04
    1f28:	4b 83       	std	Y+3, r20	; 0x03
	if (num == TIMER1)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <TIMERS_setCallBack+0x28>
		g_timer1_overflow = f_ptr;
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	90 93 7e 00 	sts	0x007E, r25
    1f38:	80 93 7d 00 	sts	0x007D, r24
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <TIMERS_setCallBack+0xa6>
	else if (num == TIMER1A)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	39 f4       	brne	.+14     	; 0x1f52 <TIMERS_setCallBack+0x3c>
		g_timer1_compareA = f_ptr;
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	90 93 80 00 	sts	0x0080, r25
    1f4c:	80 93 7f 00 	sts	0x007F, r24
    1f50:	35 c0       	rjmp	.+106    	; 0x1fbc <TIMERS_setCallBack+0xa6>
	else if (num == TIMER1B)
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	39 f4       	brne	.+14     	; 0x1f66 <TIMERS_setCallBack+0x50>
		g_timer1_compareB = f_ptr;
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	90 93 82 00 	sts	0x0082, r25
    1f60:	80 93 81 00 	sts	0x0081, r24
    1f64:	2b c0       	rjmp	.+86     	; 0x1fbc <TIMERS_setCallBack+0xa6>
	
	else if (num == TIMER0) {
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	88 23       	and	r24, r24
    1f6a:	99 f4       	brne	.+38     	; 0x1f92 <TIMERS_setCallBack+0x7c>
		if (mode == NORMAL)
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	88 23       	and	r24, r24
    1f70:	31 f4       	brne	.+12     	; 0x1f7e <TIMERS_setCallBack+0x68>
			g_timer0_overflow = f_ptr;
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	90 93 7a 00 	sts	0x007A, r25
    1f7a:	80 93 79 00 	sts	0x0079, r24
		if (mode == CTC)
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	e1 f4       	brne	.+56     	; 0x1fbc <TIMERS_setCallBack+0xa6>
			g_timer0_compare = f_ptr;	
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	90 93 7c 00 	sts	0x007C, r25
    1f8c:	80 93 7b 00 	sts	0x007B, r24
    1f90:	15 c0       	rjmp	.+42     	; 0x1fbc <TIMERS_setCallBack+0xa6>
	}

	else if (num == TIMER2) {
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	91 f4       	brne	.+36     	; 0x1fbc <TIMERS_setCallBack+0xa6>
		if (mode == NORMAL)
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	88 23       	and	r24, r24
    1f9c:	31 f4       	brne	.+12     	; 0x1faa <TIMERS_setCallBack+0x94>
			g_timer2_overflow = f_ptr;
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	90 93 84 00 	sts	0x0084, r25
    1fa6:	80 93 83 00 	sts	0x0083, r24
		if (mode == CTC)
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	82 30       	cpi	r24, 0x02	; 2
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <TIMERS_setCallBack+0xa6>
			g_timer2_compare = f_ptr;	
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	90 93 86 00 	sts	0x0086, r25
    1fb8:	80 93 85 00 	sts	0x0085, r24
	}
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <TIMERS_deInit>:

void TIMERS_deInit(TIMERS_Num num) {
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	89 83       	std	Y+1, r24	; 0x01
	/* disable the clock to disable the timer */
	if (num == TIMER1 || num == TIMER1A || num == TIMER1B)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <TIMERS_deInit+0x1e>
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <TIMERS_deInit+0x1e>
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	83 30       	cpi	r24, 0x03	; 3
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <TIMERS_deInit+0x26>
		TCCR1B = 0;
    1fe8:	ee e4       	ldi	r30, 0x4E	; 78
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	10 82       	st	Z, r1
    1fee:	0d c0       	rjmp	.+26     	; 0x200a <TIMERS_deInit+0x40>
	else if (num == TIMER0)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 23       	and	r24, r24
    1ff4:	21 f4       	brne	.+8      	; 0x1ffe <TIMERS_deInit+0x34>
		TCCR0 = 0;
    1ff6:	e3 e5       	ldi	r30, 0x53	; 83
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	10 82       	st	Z, r1
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <TIMERS_deInit+0x40>
	else if (num == TIMER2)
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	19 f4       	brne	.+6      	; 0x200a <TIMERS_deInit+0x40>
		TCCR2 = 0;
    2004:	e5 e4       	ldi	r30, 0x45	; 69
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	10 82       	st	Z, r1
}
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <__udivmodqi4>:
    2012:	99 1b       	sub	r25, r25
    2014:	79 e0       	ldi	r23, 0x09	; 9
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <__udivmodqi4_ep>

00002018 <__udivmodqi4_loop>:
    2018:	99 1f       	adc	r25, r25
    201a:	96 17       	cp	r25, r22
    201c:	08 f0       	brcs	.+2      	; 0x2020 <__udivmodqi4_ep>
    201e:	96 1b       	sub	r25, r22

00002020 <__udivmodqi4_ep>:
    2020:	88 1f       	adc	r24, r24
    2022:	7a 95       	dec	r23
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__udivmodqi4_loop>
    2026:	80 95       	com	r24
    2028:	08 95       	ret

0000202a <__prologue_saves__>:
    202a:	2f 92       	push	r2
    202c:	3f 92       	push	r3
    202e:	4f 92       	push	r4
    2030:	5f 92       	push	r5
    2032:	6f 92       	push	r6
    2034:	7f 92       	push	r7
    2036:	8f 92       	push	r8
    2038:	9f 92       	push	r9
    203a:	af 92       	push	r10
    203c:	bf 92       	push	r11
    203e:	cf 92       	push	r12
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	ca 1b       	sub	r28, r26
    2054:	db 0b       	sbc	r29, r27
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	09 94       	ijmp

00002062 <__epilogue_restores__>:
    2062:	2a 88       	ldd	r2, Y+18	; 0x12
    2064:	39 88       	ldd	r3, Y+17	; 0x11
    2066:	48 88       	ldd	r4, Y+16	; 0x10
    2068:	5f 84       	ldd	r5, Y+15	; 0x0f
    206a:	6e 84       	ldd	r6, Y+14	; 0x0e
    206c:	7d 84       	ldd	r7, Y+13	; 0x0d
    206e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2070:	9b 84       	ldd	r9, Y+11	; 0x0b
    2072:	aa 84       	ldd	r10, Y+10	; 0x0a
    2074:	b9 84       	ldd	r11, Y+9	; 0x09
    2076:	c8 84       	ldd	r12, Y+8	; 0x08
    2078:	df 80       	ldd	r13, Y+7	; 0x07
    207a:	ee 80       	ldd	r14, Y+6	; 0x06
    207c:	fd 80       	ldd	r15, Y+5	; 0x05
    207e:	0c 81       	ldd	r16, Y+4	; 0x04
    2080:	1b 81       	ldd	r17, Y+3	; 0x03
    2082:	aa 81       	ldd	r26, Y+2	; 0x02
    2084:	b9 81       	ldd	r27, Y+1	; 0x01
    2086:	ce 0f       	add	r28, r30
    2088:	d1 1d       	adc	r29, r1
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	ed 01       	movw	r28, r26
    2096:	08 95       	ret

00002098 <_exit>:
    2098:	f8 94       	cli

0000209a <__stop_program>:
    209a:	ff cf       	rjmp	.-2      	; 0x209a <__stop_program>
